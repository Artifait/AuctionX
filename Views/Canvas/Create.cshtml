@using AucX.WebUI.Models;
@model CanvasViewModel
@{
    ViewData["Title"] = "Pixel Canvas Editor";
}
<form id="canvasForm" asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    <div class="editor-container">
        <!-- Header Section -->
        <div class="editor-header">
            <input type="text" id="canvasName" 
                asp-for="Name" 
                placeholder="Название холста"
                class="name-input"
                required>
            <div class="header-controls">
                <input type="number" id="inputWidth" 
                    asp-for="Width" 
                    min="1" 
                    max="@Model.MaxWidth"
                    class="size-input">
                <input type="number" id="inputHeight" 
                    asp-for="Height" 
                    min="1" 
                    max="@Model.MaxHeight"
                    class="size-input">
                <button class="btn-apply" id="btnApplySize">Применить</button>
            </div>
        </div>

        <!-- Main Editor Area -->
        <div class="editor-main">
            <!-- Tools & Colors Panel -->
            <div class="side-panel">
                <div class="tools-panel">
                    <button class="tool-btn active" data-tool="pencil">✏️ Карандаш</button>
                    <button class="tool-btn" data-tool="fill">🎨 Заливка</button>
                </div>
                
                <div class="color-palette">
                    @foreach (var color in Model.AvailableColors)
                    {
                        <div class="color-item @(color == Model.AvailableColors.First() ? "active" : "")" 
                            style="background: @color" 
                            data-color="@color"
                            title="@color">
                        </div>
                    }
                </div>
            </div>

            <!-- Canvas Container -->
            <div class="canvas-wrapper" id="canvasWrapper">
                <div id="pixelCanvas" class="pixel-canvas"></div>
            </div>
        </div>

        <!-- Обновляем кнопку сохранения -->
        <button type="button" class="btn-save" id="btnSave">💾 Сохранить холст</button>
            
        <!-- Hidden Fields -->
        <input type="hidden" asp-for="PixelData" id="pixelData" />
    </div>
</form>

@section Styles {
<style>
    /* Base Layout */
    .editor-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        padding: 20px;
        background: #f0f0f0;
    }

    .editor-header {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
        padding: 15px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .name-input {
        flex: 1;
        padding: 10px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 16px;
    }

    .header-controls {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .size-input {
        width: 80px;
        padding: 8px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        text-align: center;
    }

    .btn-apply {
        padding: 8px 20px;
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background 0.2s;
    }

    .btn-apply:hover {
        background: #45a049;
    }

    .editor-main {
        display: flex;
        flex: 1;
        gap: 20px;
        overflow: hidden;
    }

    .side-panel {
        display: flex;
        flex-direction: column;
        gap: 20px;
        width: 200px;
    }

    .tools-panel {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 15px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .tool-btn {
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .tool-btn.active {
        background: #2196F3;
        color: white;
        border-color: #2196F3;
    }

    .color-palette {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
        gap: 10px;
        padding: 15px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .color-item {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.2s;
    }

    .color-item.active {
        border-color: #000;
        transform: scale(1.1);
        box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    }

    .canvas-wrapper {
        flex: 1;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 20px;
        overflow: auto;
    }

    .pixel-canvas {
        display: grid;
        margin: auto;
        background: white;
        border: 1px solid #e0e0e0;
    }

    .pixel {
        width: 100%;
        height: 100%;
        border: 1px solid rgba(0,0,0,0.05);
        cursor: crosshair;
        transition: background 0.1s;
    }

    .btn-save {
        margin-top: 20px;
        padding: 12px 30px;
        background: #2196F3;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background 0.2s;
        align-self: flex-end;
    }

    .btn-save:hover {
        background: #1976D2;
    }
</style>
}

@section Scripts {
<script>
class PixelEditor {
    static DEFAULT_COLOR = '#FFFFFF';
    static MAX_SIZE = 64;
    static MIN_SIZE = 1;
    
    static state = {
        width: @Model.Width,
        height: @Model.Height,
        pixels: {},
        activeColor: '@Model.AvailableColors.First()',
        activeTool: 'pencil',
        isDrawing: false,
        scale: 1
    };

    static init() {
        this.initCanvas();
        this.initEventListeners();
        this.updateColorSelection();
        this.updateCanvasScale();
        window.addEventListener('resize', () => this.updateCanvasScale());
    }

    static initCanvas() {
        const canvas = document.getElementById('pixelCanvas');
        canvas.style.gridTemplateColumns = `repeat(${this.state.width}, 1fr)`;
        canvas.innerHTML = '';
        
        for(let y = 0; y < this.state.height; y++) {
            for(let x = 0; x < this.state.width; x++) {
                const pixel = this.createPixel(x, y);
                canvas.appendChild(pixel);
            }
        }
    }

    static createPixel(x, y) {
        const pixel = document.createElement('div');
        pixel.className = 'pixel';
        pixel.dataset.x = x;
        pixel.dataset.y = y;
        pixel.style.backgroundColor = this.getPixelColor(x, y);
        
        pixel.addEventListener('mousedown', (e) => {
            e.preventDefault();
            this.handleStartDrawing(x, y);
        });
        
        return pixel;
    }

    static getPixelColor(x, y) {
        return this.state.pixels[`${x},${y}`] || this.DEFAULT_COLOR;
    }

    static handleStartDrawing(x, y) {
        this.state.isDrawing = true;
        this.handlePixelAction(x, y);
        document.addEventListener('mousemove', this.handleDrawing);
        document.addEventListener('mouseup', this.handleEndDrawing);
    }

    static handleDrawing = (e) => {
        if (!this.state.isDrawing) return;
        
        const pixel = e.target.closest('.pixel');
        if (pixel) {
            const x = parseInt(pixel.dataset.x);
            const y = parseInt(pixel.dataset.y);
            this.handlePixelAction(x, y);
        }
    }

    static handleEndDrawing = () => {
        this.state.isDrawing = false;
        document.removeEventListener('mousemove', this.handleDrawing);
        document.removeEventListener('mouseup', this.handleEndDrawing);
    }

    static handlePixelAction(x, y) {
        switch(this.state.activeTool) {
            case 'pencil':
                this.setPixel(x, y, this.state.activeColor);
                break;
            case 'fill':
                this.floodFill(x, y);
                break;
        }
    }

    static setPixel(x, y, color) {
        const key = `${x},${y}`;
        if (this.state.pixels[key] === color) return;
        
        this.state.pixels[key] = color;
        const pixel = document.querySelector(`.pixel[data-x="${x}"][data-y="${y}"]`);
        if (pixel) pixel.style.backgroundColor = color;
    }

    static floodFill(startX, startY) {
        const targetColor = this.getPixelColor(startX, startY);
        if (targetColor === this.state.activeColor) return;

        const stack = [[startX, startY]];
        const visited = new Set();

        while (stack.length > 0) {
            const [x, y] = stack.pop();
            const key = `${x},${y}`;
            
            if (visited.has(key)) continue;
            if (this.getPixelColor(x, y) !== targetColor) continue;
            
            this.setPixel(x, y, this.state.activeColor);
            visited.add(key);

            if (x > 0) stack.push([x - 1, y]);
            if (x < this.state.width - 1) stack.push([x + 1, y]);
            if (y > 0) stack.push([x, y - 1]);
            if (y < this.state.height - 1) stack.push([x, y + 1]);
        }
    }

    static updateCanvasScale() {
        const container = document.getElementById('canvasWrapper');
        const canvas = document.getElementById('pixelCanvas');
        
        const containerWidth = container.clientWidth - 40;
        const containerHeight = container.clientHeight - 40;
        
        const maxCellSize = Math.min(
            containerWidth / this.state.width,
            containerHeight / this.state.height
        );
        
        canvas.style.width = `${this.state.width * maxCellSize}px`;
        canvas.style.height = `${this.state.height * maxCellSize}px`;
    }

    static applyCanvasSize() {
        const newWidth = Math.min(this.MAX_SIZE, 
            Math.max(this.MIN_SIZE, 
            parseInt(document.getElementById('inputWidth').value)));
        
        const newHeight = Math.min(this.MAX_SIZE, 
            Math.max(this.MIN_SIZE, 
            parseInt(document.getElementById('inputHeight').value)));
        
        if (newWidth !== this.state.width || newHeight !== this.state.height) {
            this.state.width = newWidth;
            this.state.height = newHeight;
            this.initCanvas();
            this.updateCanvasScale();
        }
    }

    static updateColorSelection() {
        document.querySelectorAll('.color-item').forEach(item => {
            const isActive = item.dataset.color === this.state.activeColor;
            item.classList.toggle('active', isActive);
        });
    }

    static async saveCanvas() {
        try {
            const pixelData = [];
            for (let y = 0; y < this.state.height; y++) {
                for (let x = 0; x < this.state.width; x++) {
                    pixelData.push(this.getPixelColor(x, y));
                }
            }
            
            // Заполняем скрытое поле
            document.getElementById('pixelData').value = pixelData.join(',');
            
            // Отправляем форму
            document.getElementById('canvasForm').submit();
            
        } catch (error) {
            console.error('Ошибка сохранения:', error);
            alert('Ошибка при сохранении холста!');
        }
    }
    
    // Event Listeners Initialization
    static initEventListeners() {
        // Tools Selection
        document.querySelectorAll('.tool-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.tool-btn').forEach(b => 
                    b.classList.remove('active'));
                btn.classList.add('active');
                this.state.activeTool = btn.dataset.tool;
            });
        });

        // Color Selection
        document.querySelectorAll('.color-item').forEach(item => {
            item.addEventListener('click', () => {
                this.state.activeColor = item.dataset.color;
                this.updateColorSelection();
            });
        });

        // Size Controls
        document.getElementById('btnApplySize').addEventListener('click', () => 
            this.applyCanvasSize());

        // Save Button
        document.getElementById('btnSave').addEventListener('click', () => 
            this.saveCanvas());
    }
}

// Initialize Editor
document.addEventListener('DOMContentLoaded', () => PixelEditor.init());
</script>
}