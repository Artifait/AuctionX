@using AucX.WebUI.Models
@model ProfileViewModel

<div class="profile-container">
    <!-- Блок информации о пользователе -->
    <div class="user-info-section">
        <div class="avatar" id="userAvatar" data-username="@Model.UserName"></div>
        <div class="user-details">
            <div class="detail-item">
                <label>Логин:</label>
                <span>@Model.UserName</span>
                <button class="btn-edit" onclick="showComingSoon()">✎</button>
            </div>
            <div class="detail-item">
                <label>Почта:</label>
                <span>@Model.Email</span>
                <button class="btn-edit" onclick="showComingSoon()">✎</button>
            </div>
            <div class="detail-item">
                <label>Пароль:</label>
                <span>•••••••</span>
                <button class="btn-edit" onclick="showComingSoon()">✎</button>
            </div>
        </div>
    </div>

    <!-- Блок с пиксель-артами -->
    <div class="art-collection">
        <h3>Ваши работы</h3>
        <div class="art-grid">
            @foreach (var art in Model.UserCanvasItems)
            {
                <a asp-controller="Canvas" asp-action="Details" asp-route-id="@art.Id" class="art-thumbnail" 
                style="aspect-ratio: @art.Width / @art.Height;">
                    <canvas class="pixel-art"
                            data-pixels="@art.PixelData"
                            data-width="@art.Width"
                            data-height="@art.Height"></canvas>
                    <div class="art-info">@art.Name</div>
                </a>
            }
        </div>
    </div>

    <!-- Блок аукционов -->
    <div class="auction-section">
        <h3>Активные лоты</h3>
        <div class="auction-grid">
            @foreach (var lot in Model.AuctionLots)
            {
                <div class="auction-card @(lot.CurrentBid >= lot.MinimumPrice ? "valid-bid" : "invalid-bid")">
                    <div class="auction-thumbnail" 
                        style="aspect-ratio: @lot.CanvasItem.Width / @lot.CanvasItem.Height;">
                        <canvas class="pixel-art"
                                data-pixels="@lot.CanvasItem.PixelData"
                                data-width="@lot.CanvasItem.Width"
                                data-height="@lot.CanvasItem.Height"></canvas>
                    </div>
                    <div class="auction-info">
                        <div class="auction-timer" data-end="@lot.EndTime.ToString("o")">
                            @if (lot.EndTime > DateTime.UtcNow)
                            {
                                <span class="time-remaining"></span>
                            }
                            else
                            {
                                <span class="ended">Торги закрыты</span>
                            }
                        </div>
                        <div class="current-bid">Текущая ставка: @lot.CurrentBid.ToString("N0")</div>
                        <div class="minimum-price">Минимум: @lot.MinimumPrice.ToString("N0")</div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
.profile-container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

.user-info-section {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 30px;
    margin-bottom: 40px;
}

.avatar {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: linear-gradient(135deg, #ff6b6b, #4ecdc4);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3em;
    color: white;
    text-shadow: 1px 1px 3px rgba(0,0,0,0.3);
}

.user-details {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.detail-item {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 1.1em;
}

.btn-edit {
    background: none;
    border: none;
    cursor: pointer;
    color: #666;
    padding: 5px;
}

.art-collection, .auction-section {
    margin-bottom: 40px;
}

/* Для сеток */
.art-grid, .auction-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
}

.art-thumbnail, .auction-thumbnail {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    background: #f8f8f8;
}

.art-thumbnail:hover, .auction-card:hover {
    transform: translateY(-5px);
}

.canvas-wrapper {
    width: 100%;
    max-height: 200px;
    overflow: hidden;
    background: #f5f5f5;
}

.pixel-art {
    width: 100%;
    height: 100%;
    image-rendering: pixelated;
}

.auction-card {
    position: relative;
}

.auction-card.valid-bid {
    border: 2px solid #4CAF50;
}

.auction-card.invalid-bid {
    border: 2px solid #f44336;
}

.auction-info {
    padding: 15px;
}

.auction-timer {
    font-weight: bold;
    color: #666;
}

.time-remaining {
    color: #2196F3;
}

.ended {
    color: #f44336;
}
</style>

@section Scripts {
<script>
// Генерация аватара
function generateAvatar() {
    const avatar = document.getElementById('userAvatar');
    const username = avatar.dataset.username;
    
    let hash = 0;
    for (let i = 0; i < username.length; i++) {
        hash = username.charCodeAt(i) + ((hash << 5) - hash);
    }
    
    const color1 = `hsl(${hash % 360}, 70%, 50%)`;
    const color2 = `hsl(${(hash + 150) % 360}, 70%, 50%)`;
    
    const initials = username.slice(0, 2).toUpperCase();
    
    avatar.style.background = `linear-gradient(135deg, ${color1}, ${color2})`;
    avatar.textContent = initials;
}

function renderPixelArts() {
    document.querySelectorAll('.pixel-art').forEach(canvas => {
        const pixelData = canvas.dataset.pixels;
        const width = parseInt(canvas.dataset.width) || 0;
        const height = parseInt(canvas.dataset.height) || 0;

        if (!pixelData || width <= 0 || height <= 0) return;

        const ctx = canvas.getContext('2d');
        canvas.width = width;
        canvas.height = height;

        // Разбиваем данные на массив цветов
        const colors = pixelData.split(';').filter(c => c);
        
        // Отрисовываем пиксели
        for(let i = 0; i < colors.length; i++) {
            const x = i % width;
            const y = Math.floor(i / width);
            
            // Если вышли за пределы холста - прекращаем отрисовку
            if(y >= height) break;
            
            ctx.fillStyle = colors[i] || '#FFFFFF';
            ctx.fillRect(x, y, 1, 1);
        }
    });
}

// Таймеры для аукционов
function updateTimers() {
    document.querySelectorAll('.auction-timer').forEach(timer => {
        const endTime = new Date(timer.dataset.end);
        const now = new Date();
        
        if (endTime > now) {
            const diff = endTime - now;
            const hours = Math.floor(diff / 3600000);
            const minutes = Math.floor((diff % 3600000) / 60000);
            timer.querySelector('.time-remaining').textContent = `${hours}ч ${minutes}м`;
        }
    });
}

// Отложенное сообщение (заглушка)
function showComingSoon() {
    alert('Этот функционал находится в разработке!');
}

// Инициализация при загрузке страницы
document.addEventListener('DOMContentLoaded', () => {
    generateAvatar();
    renderPixelArts();
    updateTimers();
    setInterval(updateTimers, 60000);
});
</script>
}
