@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Конструктор холста";
    var token = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<input type="hidden" name="__RequestVerificationToken" value="@token" />

<div class="container">

    <!-- Блок уведомлений -->
    <div class="notifications"></div>

    <!-- Форма сохранения -->
    <div class="save-section">
        <input type="text" id="canvasName" placeholder="Название холста" class="name-input">
        <button id="saveCanvas" class="save-button">Сохранить холст</button>
    </div>

    <!-- Панель инструментов -->
    <div class="toolbar">
        <!-- Режимы рисования -->
        <div class="toolbar-section">
            <h3>Режим рисования</h3>
            <div class="mode-buttons">
                <button class="mode-button active" data-mode="pencil">От руки</button>
                <button class="mode-button" data-mode="fill">Заливка</button>
            </div>
        </div>

        <!-- Управление размером -->
        <div class="toolbar-section">
            <h3>Размер холста</h3>
            <div class="size-controls">
                <label>Ширина:
                    <input type="number" id="canvasWidth" class="size-input" min="1" value="1">
                </label>
                <label>Высота:
                    <input type="number" id="canvasHeight" class="size-input" min="1" value="1">
                </label>
            </div>
        </div>

        <!-- Выбранный цвет -->
        <div class="toolbar-section">
            <h3>Выбранный цвет</h3>
            <div id="selectedColor" class="color-preview"></div>
        </div>
    </div>

    <!-- Область холста -->
    <div class="canvas-container">
        <canvas id="canvas"></canvas>
    </div>

    <!-- Палитра цветов -->
    <div class="color-palette"></div>
</div>

@section Styles {
    <style>
        :root {
            --bg-color: #1a1a1a;
            --text-color: #e0e0e0;
            --toolbar-bg: #2d2d2d;
            --color-item-border: #444;
            --color-item-size: 40px;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
        }

        .container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .toolbar {
            background-color: var(--toolbar-bg);
            padding: 15px;
            border-radius: 8px;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .toolbar-section {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .mode-buttons {
            display: flex;
            gap: 10px;
        }

        .mode-button {
            padding: 8px 16px;
            background-color: #4a4a4a;
            border: none;
            border-radius: 4px;
            color: var(--text-color);
            cursor: pointer;
        }

        .mode-button.active {
            background-color: #007bff;
        }

        .size-controls {
            display: flex;
            gap: 10px;
        }

        .size-input {
            width: 60px;
            padding: 4px;
            background-color: #4a4a4a;
            border: 1px solid #666;
            border-radius: 4px;
            color: var(--text-color);
        }

        .color-preview {
            width: var(--color-item-size);
            height: var(--color-item-size);
            border: 2px solid var(--color-item-border);
            border-radius: 4px;
        }

        .canvas-container {
            background-color: #333;
            padding: 20px;
            border-radius: 8px;
            overflow: auto;
        }

        #canvas {
            background-color: white;
            border: 1px solid #666;
        }

        .color-palette {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .color-group h3 {
            margin: 0 0 10px 0;
            font-size: 1.1em;
        }

        .colors {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .color-item {
            width: var(--color-item-size);
            height: var(--color-item-size);
            border: 2px solid var(--color-item-border);
            border-radius: 4px;
            cursor: pointer;
            transition: transform 0.1s;
        }

        .color-item:hover {
            transform: scale(1.1);
        }

        .color-item.purchased {
            border-color: gold;
        }

        .notifications {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            max-width: 300px;
        }

        .notification {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 10px;
            animation: slideIn 0.3s ease-out;
        }

        .notification.success {
            background-color: #28a745;
            color: white;
        }

        .notification.error {
            background-color: #dc3545;
            color: white;
        }

        .save-section {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .name-input {
            padding: 8px 12px;
            background-color: #4a4a4a;
            border: 1px solid #666;
            border-radius: 4px;
            color: var(--text-color);
            flex-grow: 1;
        }

        .save-button {
            padding: 8px 16px;
            background-color: #28a745;
            border: none;
            border-radius: 4px;
            color: white;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .save-button:hover {
            background-color: #218838;
        }

        @@keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        @@media (max-width: 768px) {
            .toolbar {
                flex-direction: column;
            }

            .size-controls {
                flex-direction: column;
            }
        }
    </style>
}

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', async () => {
        // Загрузка данных пользователя
        const response = await fetch('/api/ItemConstructor/user-info');
        const userData = await response.json();

        // Инициализация элементов
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        let currentMode = 'pencil';
        let selectedColor = '#ffffff';
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;

        // Настройка размеров холста
        const setupCanvas = (width, height) => {
            canvas.width = width;
            canvas.height = height;
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, width, height);
        };

        // Обработчики изменения размеров
        document.getElementById('canvasWidth').addEventListener('change', function() {
            setupCanvas(this.value, canvas.height);
        });

        document.getElementById('canvasHeight').addEventListener('change', function() {
            setupCanvas(canvas.width, this.value);
        });

        // Инициализация холста
        setupCanvas(userData.minCanvasWidth, userData.minCanvasHeight);

        // Генерация палитры
        const generatePalette = (colors, title, isPurchased = false) => {
            return `
                <div class="color-group">
                    <h3>${title}</h3>
                    <div class="colors">
                        ${colors.map(color => `
                            <div class="color-item ${isPurchased ? 'purchased' : ''}" 
                                    style="background-color: ${color.colorCode}"
                                    data-color="${color.colorCode}">
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        };

        document.querySelector('.color-palette').innerHTML = 
            generatePalette(userData.availableColors, 'Основные цвета') +
            generatePalette(userData.purchasedColors, 'Купленные цвета', true);

        // Выбор цвета
        document.querySelectorAll('.color-item').forEach(item => {
            item.addEventListener('click', () => {
                selectedColor = item.dataset.color;
                document.getElementById('selectedColor').style.backgroundColor = selectedColor;
            });
        });

        // Переключение режимов
        document.querySelectorAll('.mode-button').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.mode-button').forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                currentMode = button.dataset.mode;
            });
        });

        // Логика рисования
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', () => isDrawing = false);
        canvas.addEventListener('mouseleave', () => isDrawing = false);

        function startDrawing(e) {
            isDrawing = true;
            const rect = canvas.getBoundingClientRect();
            [lastX, lastY] = [e.clientX - rect.left, e.clientY - rect.top];
            
            if (currentMode === 'fill') {
                floodFill(Math.floor(lastX), Math.floor(lastY), selectedColor);
            }
        }

        function draw(e) {
            if (!isDrawing || currentMode !== 'pencil') return;

            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(x, y);
            ctx.strokeStyle = selectedColor;
            ctx.lineWidth = 1;
            ctx.stroke();
            [lastX, lastY] = [x, y];
        }

        // Алгоритм заливки
        function floodFill(x, y, fillColor) {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const stack = [[x, y]];
            const targetColor = getColorAtPixel(imageData, x, y);
            const fillRGBA = hexToRGBA(fillColor);

            if (colorMatch(targetColor, fillRGBA)) return;

            while (stack.length) {
                const [x, y] = stack.pop();
                const index = (y * imageData.width + x) * 4;
                
                if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) continue;
                if (!colorMatch(getColorAtPixel(imageData, x, y), targetColor)) continue;

                setColorAtPixel(imageData, x, y, fillRGBA);
                stack.push([x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]);
            }

            ctx.putImageData(imageData, 0, 0);
        }

        // Добавим после floodFill функций

        // Функция для получения данных холста
        function getCanvasData() {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const colors = [];
            
            for (let i = 0; i < imageData.data.length; i += 4) {
                const r = imageData.data[i];
                const g = imageData.data[i + 1];
                const b = imageData.data[i + 2];
                colors.push(`#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1)}`);
            }
            
            return colors.join(',');
        }

        // Функция показа уведомлений
        function showNotification(message, isSuccess = true) {
            const notification = document.createElement('div');
            notification.className = `notification ${isSuccess ? 'success' : 'error'}`;
            notification.textContent = message;
            
            const notifications = document.querySelector('.notifications');
            notifications.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 5000);
        }

        // Обработчик сохранения
        document.getElementById('saveCanvas').addEventListener('click', async () => {
            const name = document.getElementById('canvasName').value.trim();
            if (!name) {
                showNotification('Введите название холста', false);
                return;
            }
            
            try {
                // Получаем токен из формы
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/ItemConstructor/CreateCanvas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        Name: name,
                        ColorCodes: getCanvasData(),
                        Width: canvas.width,
                        Height: canvas.height
                    })
                });
                
                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }

                const result = await response.json();
                if (result.success) {
                    showNotification(result.message);
                    document.getElementById('canvasName').value = '';
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                showNotification(error.message, false);
            }
        });

        function getColorAtPixel(imageData, x, y) {
            const index = (y * imageData.width + x) * 4;
            return {
                r: imageData.data[index],
                g: imageData.data[index + 1],
                b: imageData.data[index + 2],
                a: imageData.data[index + 3]
            };
        }

        function setColorAtPixel(imageData, x, y, color) {
            const index = (y * imageData.width + x) * 4;
            imageData.data.set([color.r, color.g, color.b, color.a], index);
        }

        function colorMatch(c1, c2) {
            return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b && c1.a === c2.a;
        }

        function hexToRGBA(hex) {
            return {
                r: parseInt(hex.slice(1, 3), 16),
                g: parseInt(hex.slice(3, 5), 16),
                b: parseInt(hex.slice(5, 7), 16),
                a: 255
            };
        }
    });
</script>
}